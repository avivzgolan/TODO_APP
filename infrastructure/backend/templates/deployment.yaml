apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.microservice.name }}
  namespace: {{ .Values.microservice.namespace }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Values.microservice.name }}
  replicas: {{ .Values.microservice.replicas }}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Values.microservice.name }}
        app.kubernetes.io/name: duty-manager
        app.kubernetes.io/component: backend
    spec:
      containers:
      - name: {{ .Values.microservice.name }}
        image: {{ .Values.workload.image }}
        imagePullPolicy: IfNotPresent
        env:
          - name: DB_USER
            valueFrom: { secretKeyRef: { name: postgres-crd-pguser-duty-manager, key: user } }
          - name: DB_USER_PASSWORD
            valueFrom: { secretKeyRef: { name: postgres-crd-pguser-duty-manager, key: password } }
          - name: DB_NAME
            valueFrom: { secretKeyRef: { name: postgres-crd-pguser-duty-manager, key: dbname } }
          - name: DB_PORT
            valueFrom: { secretKeyRef: { name: postgres-crd-pguser-duty-manager, key: port } }
          - name: DB_HOST
            valueFrom: { secretKeyRef: { name: postgres-crd-pguser-duty-manager, key: host } }
          - name: TLS_CA
            valueFrom: { secretKeyRef: { name: postgres-crd-cluster-cert, key: ca.crt } }
          - name: TLS_CERT
            valueFrom: { secretKeyRef: { name: postgres-crd-cluster-cert, key: tls.crt } }
          - name: TLS_KEY
            valueFrom: { secretKeyRef: { name: postgres-crd-cluster-cert, key: tls.key } }
        envFrom:
          - configMapRef:
              name: {{ .Values.microservice.name }}-config
        ports:
          - containerPort: {{ .Values.workload.port | int }}
        resources:
          requests:
            memory: {{ .Values.workload.resources.memory }}
            cpu: {{ .Values.workload.cpu }}
          limits:
            memory: {{ .Values.workload.resources.memory }}